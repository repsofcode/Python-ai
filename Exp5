# Aim: Implementation of TSP using heuristic approach.
import numpy as np

def nearest_neighbor(distance_matrix, start=0):
    if distance_matrix.size == 0:
        raise ValueError("Distance matrix is empty!")
    if distance_matrix.shape[0] != distance_matrix.shape[1]:
        raise ValueError("Distance matrix must be a square matrix")

    n = len(distance_matrix)
    visit_order = [start]
    visited = set([start])
    curr = start
    total_cost = 0

    while len(visit_order) < n:
        min_distance = None
        next_node = None
        for i in range(n):
            if i not in visited and (min_distance is None or distance_matrix[curr][i] < min_distance):
                min_distance = distance_matrix[curr][i]
                next_node = i
        if next_node is None:
            break
        total_cost += min_distance
        curr = next_node
        visited.add(curr)
        visit_order.append(curr)
    # All nodes have been visited, complete the tour
    total_cost += distance_matrix[curr][start]
    visit_order.append(start)

    return visit_order, total_cost

def create_distance_matrix():
    np.random.seed(0)  # For reproducibility
    n = 5
    points = np.random.randint(0, 100, size=(n, 2))
    distance_matrix = np.sqrt(((points[:, np.newaxis, :] - points[np.newaxis, :, :]) ** 2).sum(-1))
    return distance_matrix

# Generate a random distance matrix for demonstration
distance_matrix = create_distance_matrix()
tour, cost = nearest_neighbor(distance_matrix)
print("Tour:", tour)
print("Total cost:", cost)

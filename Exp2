from collections import deque

def is_valid(m, c):
    """Check if state is valid"""
    if m < 0 or c < 0 or m > 3 or c > 3:
        return False
    if (m > 0 and m < c) or (3 - m > 0 and 3 - m < 3 - c):
        return False
    return True

def bfs():
    start = (3, 3, 1)   # (missionaries left, cannibals left, boat=1 means left side)
    goal  = (0, 0, 0)
    q = deque([(start, [])])
    visited = set([start])

    moves = [(1,0), (2,0), (0,1), (0,2), (1,1)]  # possible boat moves

    while q:
        (m, c, b), path = q.popleft()
        if (m, c, b) == goal:
            return path + [goal]

        for dm, dc in moves:
            if b == 1:  # boat on left
                new = (m - dm, c - dc, 0)
            else:       # boat on right
                new = (m + dm, c + dc, 1)

            if is_valid(new[0], new[1]) and new not in visited:
                visited.add(new)
                q.append((new, path + [(m, c, b)]))

    return None

# Run
solution = bfs()
print("Solution Path:")
for step in solution:
    print(step)
